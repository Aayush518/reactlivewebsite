"use strict";var e=require("@babel/runtime/helpers/extends"),r=require("react"),t=require("three"),n=require("@react-three/fiber"),a=require("./shaderMaterial.cjs.js"),o=require("./useTexture.cjs.js");function c(e){var r=Object.create(null);return e&&Object.keys(e).forEach((function(t){if("default"!==t){var n=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,n.get?n:{enumerable:!0,get:function(){return e[t]}})}})),r.default=e,Object.freeze(r)}var i=c(r),s=c(t);const l=a.shaderMaterial({color:new s.Color("white"),scale:[1,1],imageBounds:[1,1],map:null,zoom:1,grayscale:0,opacity:1},"\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n","\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  uniform float opacity;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity), grayscale);\n    \n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n"),u=i.forwardRef((({children:r,color:t,segments:a=1,scale:o=1,zoom:c=1,grayscale:s=0,opacity:u=1,texture:m,toneMapped:v,transparent:f,...g},y)=>{n.extend({ImageMaterial:l});const p=Array.isArray(o)?[o[0],o[1]]:[o,o],d=[m.image.width,m.image.height];return i.createElement("mesh",e({ref:y,scale:Array.isArray(o)?[...o,1]:o},g),i.createElement("planeGeometry",{args:[1,1,a,a]}),i.createElement("imageMaterial",{color:t,map:m,zoom:c,grayscale:s,opacity:u,scale:p,imageBounds:d,toneMapped:v,transparent:f}),r)})),m=i.forwardRef((({url:r,...t},n)=>{const a=o.useTexture(r);return i.createElement(u,e({},t,{texture:a,ref:n}))})),v=i.forwardRef((({url:r,...t},n)=>i.createElement(u,e({},t,{ref:n})))),f=i.forwardRef(((r,t)=>{if(r.url)return i.createElement(m,e({},r,{ref:t}));if(r.texture)return i.createElement(v,e({},r,{ref:t}));throw new Error("<Image /> requires a url or texture")}));exports.Image=f;
