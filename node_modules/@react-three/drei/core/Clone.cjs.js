"use strict";var e=require("@babel/runtime/helpers/extends"),r=require("three"),t=require("react"),i=require("lodash.pick"),n=require("three-stdlib");function a(e){var r=Object.create(null);return e&&Object.keys(e).forEach((function(t){if("default"!==t){var i=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,i.get?i:{enumerable:!0,get:function(){return e[t]}})}})),r.default=e,Object.freeze(r)}var o=a(r),c=a(t);const l=c.forwardRef((({isChild:r=!1,object:t,children:a,deep:s,castShadow:d,receiveShadow:u,inject:h,keys:m,...y},f)=>{var p;const b={keys:m,deep:s,inject:h,castShadow:d,receiveShadow:u};if(t=c.useMemo((()=>{if(!1===r&&!Array.isArray(t)){let e=!1;if(t.traverse((r=>{r.isSkinnedMesh&&(e=!0)})),e)return n.SkeletonUtils.clone(t)}return t}),[t,r]),Array.isArray(t))return c.createElement("group",e({},y,{ref:f}),t.map((r=>c.createElement(l,e({key:r.uuid,object:r},b)))),a);const{children:v,...w}=function(e,{keys:r=["near","far","color","distance","decay","penumbra","angle","intensity","skeleton","visible","castShadow","receiveShadow","morphTargetDictionary","morphTargetInfluences","name","geometry","material","position","rotation","scale","up","userData","bindMode","bindMatrix","bindMatrixInverse","skeleton"],deep:t,inject:n,castShadow:a,receiveShadow:l}){let s=i(e,r);return t&&(s.geometry&&"materialsOnly"!==t&&(s.geometry=s.geometry.clone()),s.material&&"geometriesOnly"!==t&&(s.material=s.material.clone())),n&&(s="function"==typeof n?{...s,children:n(e)}:c.isValidElement(n)?{...s,children:n}:{...s,...n}),e instanceof o.Mesh&&(a&&(s.castShadow=!0),l&&(s.receiveShadow=!0)),s}(t,b),g=t.type[0].toLowerCase()+t.type.slice(1);return c.createElement(g,e({},w,y,{ref:f}),(null==(p=t)?void 0:p.children).map((r=>"Bone"===r.type?c.createElement("primitive",e({key:r.uuid,object:r},b)):c.createElement(l,e({key:r.uuid,object:r},b,{isChild:!0})))),a,v)}));exports.Clone=l;
