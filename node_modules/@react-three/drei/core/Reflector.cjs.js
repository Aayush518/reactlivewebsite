"use strict";var e=require("@babel/runtime/helpers/extends"),t=require("react"),r=require("three"),a=require("@react-three/fiber"),n=require("react-merge-refs"),s=require("../materials/BlurPass.cjs.js"),o=require("../materials/MeshReflectorMaterial.cjs.js");function i(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var a=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,a.get?a:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}require("../materials/ConvolutionMaterial.cjs.js");var l=i(t);a.extend({MeshReflectorMaterial:o.MeshReflectorMaterial});const u=l.forwardRef((({mixBlur:t=0,mixStrength:o=.5,resolution:i=256,blur:u=[0,0],args:c=[1,1],minDepthThreshold:d=.9,maxDepthThreshold:p=1,depthScale:m=0,depthToBlurRatioBias:h=.25,mirror:x=0,children:f,debug:M=0,distortion:w=1,mixContrast:T=1,distortionMap:b,...y},g)=>{l.useEffect((()=>{console.warn("Reflector has been deprecated and will be removed next major. Replace it with <MeshReflectorMaterial />!")}),[]);const S=a.useThree((({gl:e})=>e)),R=a.useThree((({camera:e})=>e)),j=a.useThree((({scene:e})=>e)),v=(u=Array.isArray(u)?u:[u,u])[0]+u[1]>0,B=l.useRef(null),[D]=l.useState((()=>new r.Plane)),[F]=l.useState((()=>new r.Vector3)),[P]=l.useState((()=>new r.Vector3)),[V]=l.useState((()=>new r.Vector3)),[W]=l.useState((()=>new r.Matrix4)),[E]=l.useState((()=>new r.Vector3(0,0,-1))),[q]=l.useState((()=>new r.Vector4)),[O]=l.useState((()=>new r.Vector3)),[U]=l.useState((()=>new r.Vector3)),[C]=l.useState((()=>new r.Vector4)),[L]=l.useState((()=>new r.Matrix4)),[k]=l.useState((()=>new r.PerspectiveCamera)),z=l.useCallback((()=>{if(P.setFromMatrixPosition(B.current.matrixWorld),V.setFromMatrixPosition(R.matrixWorld),W.extractRotation(B.current.matrixWorld),F.set(0,0,1),F.applyMatrix4(W),O.subVectors(P,V),O.dot(F)>0)return;O.reflect(F).negate(),O.add(P),W.extractRotation(R.matrixWorld),E.set(0,0,-1),E.applyMatrix4(W),E.add(V),U.subVectors(P,E),U.reflect(F).negate(),U.add(P),k.position.copy(O),k.up.set(0,1,0),k.up.applyMatrix4(W),k.up.reflect(F),k.lookAt(U),k.far=R.far,k.updateMatrixWorld(),k.projectionMatrix.copy(R.projectionMatrix),L.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),L.multiply(k.projectionMatrix),L.multiply(k.matrixWorldInverse),L.multiply(B.current.matrixWorld),D.setFromNormalAndCoplanarPoint(F,P),D.applyMatrix4(k.matrixWorldInverse),q.set(D.normal.x,D.normal.y,D.normal.z,D.constant);const e=k.projectionMatrix;C.x=(Math.sign(q.x)+e.elements[8])/e.elements[0],C.y=(Math.sign(q.y)+e.elements[9])/e.elements[5],C.z=-1,C.w=(1+e.elements[10])/e.elements[14],q.multiplyScalar(2/q.dot(C)),e.elements[2]=q.x,e.elements[6]=q.y,e.elements[10]=q.z+1,e.elements[14]=q.w}),[]),[A,I,G,_]=l.useMemo((()=>{const e={type:r.HalfFloatType,minFilter:r.LinearFilter,magFilter:r.LinearFilter},a=new r.WebGLRenderTarget(i,i,e);a.depthBuffer=!0,a.depthTexture=new r.DepthTexture(i,i),a.depthTexture.format=r.DepthFormat,a.depthTexture.type=r.UnsignedShortType;const n=new r.WebGLRenderTarget(i,i,e);return[a,n,new s.BlurPass({gl:S,resolution:i,width:u[0],height:u[1],minDepthThreshold:d,maxDepthThreshold:p,depthScale:m,depthToBlurRatioBias:h}),{mirror:x,textureMatrix:L,mixBlur:t,tDiffuse:a.texture,tDepth:a.depthTexture,tDiffuseBlur:n.texture,hasBlur:v,mixStrength:o,minDepthThreshold:d,maxDepthThreshold:p,depthScale:m,depthToBlurRatioBias:h,transparent:!0,debug:M,distortion:w,distortionMap:b,mixContrast:T,"defines-USE_BLUR":v?"":void 0,"defines-USE_DEPTH":m>0?"":void 0,"defines-USE_DISTORTION":b?"":void 0}]}),[S,u,L,i,x,v,t,o,d,p,m,h,M,w,b,T]);return a.useFrame((()=>{if(null==B||!B.current)return;B.current.visible=!1;const e=S.xr.enabled,t=S.shadowMap.autoUpdate;z(),S.xr.enabled=!1,S.shadowMap.autoUpdate=!1,S.setRenderTarget(A),S.state.buffers.depth.setMask(!0),S.autoClear||S.clear(),S.render(j,k),v&&G.render(S,A,I),S.xr.enabled=e,S.shadowMap.autoUpdate=t,B.current.visible=!0,S.setRenderTarget(null)})),l.createElement("mesh",e({ref:n([B,g])},y),l.createElement("planeGeometry",{args:c}),f?f("meshReflectorMaterial",_):l.createElement("meshReflectorMaterial",_))}));exports.Reflector=u;
