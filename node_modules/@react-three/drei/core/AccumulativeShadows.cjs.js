"use strict";var e=require("@babel/runtime/helpers/extends"),t=require("three"),r=require("react"),a=require("@react-three/fiber"),i=require("./shaderMaterial.cjs.js"),s=require("../materials/DiscardMaterial.cjs.js");function n(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var a=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,a.get?a:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var o=n(t),l=n(r);const h=l.createContext(null),c=i.shaderMaterial({color:new o.Color,blend:2,alphaTest:.75,opacity:0,map:null},"varying vec2 vUv;\n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vUv = uv;\n   }","varying vec2 vUv;\n   uniform sampler2D map;\n   uniform vec3 color;\n   uniform float opacity;\n   uniform float alphaTest;\n   uniform float blend;\n   void main() {\n     vec4 sampledDiffuseColor = texture2D(map, vUv);\n     gl_FragColor = vec4(color * sampledDiffuseColor.r * blend, max(0.0, (1.0 - (sampledDiffuseColor.r + sampledDiffuseColor.g + sampledDiffuseColor.b) / alphaTest)) * opacity);\n     #include <tonemapping_fragment>\n     #include <encodings_fragment>\n   }"),u=l.forwardRef((({children:e,temporal:t,frames:r=40,limit:i=1/0,blend:s=20,scale:n=10,opacity:o=1,alphaTest:u=.75,color:d="black",colorBlend:g=2,resolution:m=1024,toneMapped:f=!0,...v},M)=>{a.extend({SoftShadowMaterial:c});const b=a.useThree((e=>e.gl)),w=a.useThree((e=>e.scene)),y=a.useThree((e=>e.camera)),C=a.useThree((e=>e.invalidate)),x=l.useRef(null),S=l.useRef(null),[T]=l.useState((()=>new p(b,w,m)));l.useLayoutEffect((()=>{T.configure(x.current)}),[]);const j=l.useMemo((()=>({lights:new Map,temporal:!!t,frames:Math.max(2,r),blend:Math.max(2,r===1/0?s:r),count:0,getMesh:()=>x.current,reset:()=>{T.clear();const e=x.current.material;e.opacity=0,e.alphaTest=0,j.count=0},update:(e=1)=>{const t=x.current.material;j.temporal?(t.opacity=Math.min(o,t.opacity+o/j.blend),t.alphaTest=Math.min(u,t.alphaTest+u/j.blend)):(t.opacity=o,t.alphaTest=u),S.current.visible=!0,T.prepare();for(let t=0;t<e;t++)j.lights.forEach((e=>e.update())),T.update(y,j.blend);S.current.visible=!1,T.finish()}})),[T,y,w,t,r,s,o,u]);return l.useLayoutEffect((()=>{j.reset(),j.temporal||j.frames===1/0||j.update(j.blend)})),l.useImperativeHandle(M,(()=>j),[j]),a.useFrame((()=>{(j.temporal||j.frames===1/0)&&j.count<j.frames&&j.count<i&&(C(),j.update(),j.count++)})),l.createElement("group",v,l.createElement("group",{traverse:()=>null,ref:S},l.createElement(h.Provider,{value:j},e)),l.createElement("mesh",{receiveShadow:!0,ref:x,scale:n,rotation:[-Math.PI/2,0,0]},l.createElement("planeGeometry",null),l.createElement("softShadowMaterial",{transparent:!0,depthWrite:!1,toneMapped:f,color:d,blend:g,map:T.progressiveLightMap2.texture})))})),d=l.forwardRef((({castShadow:t=!0,bias:r=.001,mapSize:a=512,size:i=5,near:s=.5,far:n=500,frames:c=1,position:u=[0,0,0],radius:d=1,amount:p=8,intensity:g=1,ambient:m=.5,...f},v)=>{const M=l.useRef(null),b=new o.Vector3(...u).length(),w=l.useContext(h),y=l.useCallback((()=>{let e;if(M.current)for(let t=0;t<M.current.children.length;t++)if(e=M.current.children[t],Math.random()>m)e.position.set(u[0]+o.MathUtils.randFloatSpread(d),u[1]+o.MathUtils.randFloatSpread(d),u[2]+o.MathUtils.randFloatSpread(d));else{let t=Math.acos(2*Math.random()-1)-Math.PI/2,r=2*Math.PI*Math.random();e.position.set(Math.cos(t)*Math.cos(r)*b,Math.abs(Math.cos(t)*Math.sin(r)*b),Math.sin(t)*b)}}),[d,m,b,...u]),C=l.useMemo((()=>({update:y})),[y]);return l.useImperativeHandle(v,(()=>C),[C]),l.useLayoutEffect((()=>{const e=M.current;return w&&w.lights.set(e.uuid,C),()=>{w.lights.delete(e.uuid)}}),[w,C]),l.createElement("group",e({ref:M},f),Array.from({length:p},((e,o)=>l.createElement("directionalLight",{key:o,castShadow:t,"shadow-bias":r,"shadow-mapSize":[a,a],intensity:g/p},l.createElement("orthographicCamera",{attach:"shadow-camera",args:[-i,i,i,-i,s,n]})))))}));class p{constructor(e,t,r=1024){this.renderer=e,this.res=r,this.scene=t,this.buffer1Active=!1,this.lights=[],this.meshes=[],this.object=null,this.clearColor=new o.Color,this.clearAlpha=0;const a=/(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent)?o.HalfFloatType:o.FloatType;this.progressiveLightMap1=new o.WebGLRenderTarget(this.res,this.res,{type:a}),this.progressiveLightMap2=new o.WebGLRenderTarget(this.res,this.res,{type:a}),this.discardMat=new s.DiscardMaterial,this.targetMat=new o.MeshLambertMaterial({fog:!1}),this.previousShadowMap={value:this.progressiveLightMap1.texture},this.averagingWindow={value:100},this.targetMat.onBeforeCompile=e=>{e.vertexShader="varying vec2 vUv;\n"+e.vertexShader.slice(0,-1)+"vUv = uv; gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }";const t=e.fragmentShader.indexOf("void main() {");e.fragmentShader="varying vec2 vUv;\n"+e.fragmentShader.slice(0,t)+"uniform sampler2D previousShadowMap;\n\tuniform float averagingWindow;\n"+e.fragmentShader.slice(t-1,-1)+"\nvec3 texelOld = texture2D(previousShadowMap, vUv).rgb;\n        gl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/ averagingWindow);\n      }",e.uniforms.previousShadowMap=this.previousShadowMap,e.uniforms.averagingWindow=this.averagingWindow}}clear(){this.renderer.getClearColor(this.clearColor),this.clearAlpha=this.renderer.getClearAlpha(),this.renderer.setClearColor("black",1),this.renderer.setRenderTarget(this.progressiveLightMap1),this.renderer.clear(),this.renderer.setRenderTarget(this.progressiveLightMap2),this.renderer.clear(),this.renderer.setRenderTarget(null),this.renderer.setClearColor(this.clearColor,this.clearAlpha),this.lights=[],this.meshes=[],this.scene.traverse((e=>{!function(e){return!!e.geometry}(e)?function(e){return e.isLight}(e)&&this.lights.push({object:e,intensity:e.intensity}):this.meshes.push({object:e,material:e.material})}))}prepare(){this.lights.forEach((e=>e.object.intensity=0)),this.meshes.forEach((e=>e.object.material=this.discardMat))}finish(){this.lights.forEach((e=>e.object.intensity=e.intensity)),this.meshes.forEach((e=>e.object.material=e.material))}configure(e){this.object=e}update(e,t=100){if(!this.object)return;this.averagingWindow.value=t,this.object.material=this.targetMat;const r=this.buffer1Active?this.progressiveLightMap1:this.progressiveLightMap2,a=this.buffer1Active?this.progressiveLightMap2:this.progressiveLightMap1,i=this.scene.background;this.scene.background=null,this.renderer.setRenderTarget(r),this.previousShadowMap.value=a.texture,this.buffer1Active=!this.buffer1Active,this.renderer.render(this.scene,e),this.renderer.setRenderTarget(null),this.scene.background=i}}exports.AccumulativeShadows=u,exports.RandomizedLight=d,exports.accumulativeContext=h;
